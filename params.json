{"name":"Hotwheels","tagline":"Erlang messaging server optimized to send 1 message to 40k subscribers to a topic in < 1s","body":"\r\n----------\r\n\r\n> **关于 Janus 的历史**\r\n\r\n> 在罗马神话中 Janus 是天门神，早晨打开天门，让阳光普照人间，晚上又把天门关上，使黑暗降临大地。他的头部前后各有一副面孔，同时看着两个不同方向，一副看着过去，一副看着未来，因此也称两面神，或被尊称为时间之神。罗马有好几座 Janus 神庙。Janus 掌管所有的出入门户，因此罗马人在战时永远将 Janus 神殿的门敞开着，以便军人在败阵时躲入殿内以求庇护，或是在战胜时凯旋入殿。早期的 Janus 神像的两副面孔都有胡子，后来没有胡子，但是一副面孔年轻，另一副面孔年老。Janus 的右手指上刻有数字 CCC（300），左手指上刻着数字 LXV（65），合在一起恰是一年的天数。从纪元前 1 世纪起，罗马人把祭祀 Janus 的节日和新年结合在一起。罗马的执政官也在元旦这一天就职，并向 Janus 献祭，祈求国家的安宁。为了纪念 Janus，罗马人把正月称为 Januarius（mensis），意含“Janus 之月”，英文借用了该词，先作 Januarie，后作 January 。而在英文吸收 January 一词之前，撒克逊人把正月叫作 Wulf-Monath（wolf-month），意为“狼月”，因为此时正值严冬，是狼群出没村子寻觅食物的时节。\r\n\r\n----------\r\n\r\n## 监督树总体结构\r\n\r\n\r\n\r\n```\r\n                                                      |\r\n                                                   janus_app\r\n                                                      |\r\n                                                      | (one_for_one)\r\n               +-------------------+------------------+--------------------+\r\n               |                   |                  |                    |\r\n               |                   |                  |                    |\r\n             topman          janus_acceptor      (supervisor)            mapper\r\n               |                                      |\r\n               |                                      | (simple_one_for_one)\r\n      +--------+-------|                     +--------+-------+\r\n      |        |       |                     |        |       |\r\n      |        |       |                     |        |       |\r\n   pubsub     ...   pubsub                  ...   transport  ...\r\n(topic:<<\"T1\">>)  (topic:<<\"T2\">>)                    |\r\n                                                      | (janus_flash 封装层)\r\n                                                      |\r\n                                                 client_proxy\r\n\r\n```\r\n\r\n## subscriber 行为\r\n\r\n```sequence\r\ntitle: 订阅者行为\r\nsubscriber(flashbot)-->janus: ...TCP setup...\r\nNote right of janus: a. janus_acceptor 创建 transport 进程\r\nNote right of janus: b. 进而创建 client_proxy 进程\r\nNote right of janus: c. 发送成功创建 client_proxy 的时间戳和 token 标识\r\njanus->subscriber(flashbot): {timestamp:xxx, token:yyy},1\r\nsubscriber(flashbot)->janus: <regular-socket/>,0,PING,0\r\nsubscriber(flashbot)->janus: <regular-socket/>,0,{action:subscribe, data:events},0\r\nNote right of janus: 内部经过 \r\nNote right of janus: transport ->client_proxy -> topman -> pubsub\r\nNote right of janus: 的处理，最终回复 subscribe 成功的 ack\r\njanus->subscriber(flashbot): ACK,1\r\n```\r\n\r\n\r\n### janus 针对 subscribe 的内部处理\r\n\r\n```sequence\r\ntitle: xxx\r\nsubscriber-->transport: ...TCP setup...\r\nsubscriber->transport: ...{action:subscribe, data:Topic}...\r\ntransport->client_proxy: cast {Action, Topic}\r\nclient_proxy->topman: topman:subscribe(CProxyPid,Topic)\r\ntopman->topman: cast {subscribe, CProxyPid, Topic}\r\nNote right of topman: [...\r\nNote right of topman: 在没有与 Topic 关联的 pubsub 进程时，才有如下三步\r\ntopman-->pubsub: pubsub:start(Topic)\r\npubsub-->pubsub: 关联 Topic\r\ntopman-->pubsub: monitor\r\nNote right of topman: ...] \r\ntopman->pubsub: pubsub:subscribe(PSPid, CProxyPid)\r\npubsub->pubsub: cast {subscribe, CProxyPid}\r\npubsub->client_proxy: monitor\r\npubsub->client_proxy: ack\r\nclient_proxy->transport: ack\r\ntransport->subscriber: ACK,1\r\n```\r\n\r\n\r\n\r\n\r\n## publisher 行为\r\n\r\n```sequence\r\ntitle: 发布者行为\r\nsubscriber(flashbot)-->janus: ...TCP setup...\r\npublisher(flashbot)-->janus: ...TCP setup...\r\npublisher(flashbot)->janus: <regular-socket/>,0,PUBLISH,0,{topic:xxx,event:xxx,message_id:xxx,data:xxx}\r\nNote right of janus: 内部经过\r\nNote right of janus: transport -> topman -> pubsub -> client_proxy\r\nNote right of janus: 的处理，最终将消息推送给 subscriber\r\njanus->subscriber(flashbot): {timestamp:xxx, topic:Topic},1\r\nNote right of janus: 在 publish 后，启动 30s 定时器\r\nNote right of janus: 在 30s 内若没有新内容需要 publish，则触发 PING 发送\r\njanus->subscriber(flashbot): PING,1\r\nsubscriber(flashbot)->janus: PONG,0\r\n```\r\n\r\n\r\n### janus 针对 publish 的内部处理\r\n\r\n```sequence\r\ntitle: xxx\r\npublisher-->transport: ...TCP setup...\r\npublisher->transport: ...PUBLISH,0,{topic:Topic,...}...\r\ntransport->topman: topman:publish(Msg, Topic)\r\ntopman->topman: abcast {publish, Msg, Topic}\r\nNote right of topman: [...\r\nNote right of topman: 在没有与 Topic 关联的 pubsub 进程时，才有如下三步\r\ntopman-->pubsub: pubsub:start(Topic)\r\npubsub-->pubsub: 关联 Topic\r\ntopman-->pubsub: monitor\r\nNote right of topman: ...] \r\ntopman->pubsub: pubsub:publish(PSPid, Msg)\r\npubsub->pubsub: cast {publish, Msg}\r\n\r\npubsub->client_proxy_n: {message,Msg_1}\r\nclient_proxy_n->subscriber_n: {timestamp:xx, topic:Topic,...},1\r\n\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}